/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0xa, 0x54, 0x65, 0x6d, 0x70, 0x0, // @0 "Battery\nTemp"
    0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x20, 0xa, 0x54, 0x65, 0x6d, 0x70, 0x0, // @13 "Motor \nTemp"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x0, // @25 "ERRORS"
    0x30, 0x30, 0x0, // @32 "00"
    0x30, 0x31, 0x0, // @35 "01"
    0x30, 0x32, 0x0, // @38 "02"
    0x30, 0x33, 0x0, // @41 "03"
    0x30, 0x34, 0x0, // @44 "04"
    0x30, 0x35, 0x0, // @47 "05"
    0x30, 0x36, 0x0, // @50 "06"
    0x30, 0x37, 0x0, // @53 "07"
    0x30, 0x38, 0x0, // @56 "08"
    0x30, 0x39, 0x0, // @59 "09"
    0x31, 0x30, 0x0, // @62 "10"
    0x31, 0x31, 0x0, // @65 "11"
    0x31, 0x32, 0x0, // @68 "12"
    0x31, 0x33, 0x0, // @71 "13"
    0x31, 0x34, 0x0, // @74 "14"
    0x31, 0x35, 0x0, // @77 "15"
    0x31, 0x36, 0x0, // @80 "16"
    0x31, 0x37, 0x0, // @83 "17"
    0x31, 0x38, 0x0, // @86 "18"
    0x31, 0x39, 0x0, // @89 "19"
    0x32, 0x30, 0x0, // @92 "20"
    0x32, 0x31, 0x0, // @95 "21"
    0x32, 0x32, 0x0, // @98 "22"
    0x32, 0x33, 0x0, // @101 "23"
    0x32, 0x34, 0x0, // @104 "24"
    0x32, 0x35, 0x0, // @107 "25"
    0x32, 0x36, 0x0, // @110 "26"
    0x32, 0x37, 0x0, // @113 "27"
    0x32, 0x38, 0x0, // @116 "28"
    0x32, 0x39, 0x0, // @119 "29"
    0x33, 0x30, 0x0, // @122 "30"
    0x33, 0x31, 0x0, // @125 "31"
    0x33, 0x32, 0x0, // @128 "32"
    0x33, 0x33, 0x0, // @131 "33"
    0x33, 0x34, 0x0, // @134 "34"
    0x33, 0x35, 0x0, // @137 "35"
    0x33, 0x36, 0x0, // @140 "36"
    0x33, 0x37, 0x0, // @143 "37"
    0x33, 0x38, 0x0, // @146 "38"
    0x33, 0x39, 0x0, // @149 "39"
    0x34, 0x30, 0x0, // @152 "40"
    0x34, 0x31, 0x0, // @155 "41"
    0x34, 0x32, 0x0, // @158 "42"
    0x34, 0x33, 0x0, // @161 "43"
    0x34, 0x34, 0x0, // @164 "44"
    0x34, 0x35, 0x0, // @167 "45"
    0x34, 0x36, 0x0, // @170 "46"
    0x34, 0x37, 0x0, // @173 "47"
    0x34, 0x38, 0x0, // @176 "48"
    0x34, 0x39, 0x0, // @179 "49"
    0x35, 0x30, 0x0, // @182 "50"
    0x35, 0x31, 0x0, // @185 "51"
    0x35, 0x32, 0x0, // @188 "52"
    0x35, 0x33, 0x0, // @191 "53"
    0x35, 0x34, 0x0, // @194 "54"
    0x35, 0x35, 0x0, // @197 "55"
    0x35, 0x36, 0x0, // @200 "56"
    0x35, 0x37, 0x0, // @203 "57"
    0x35, 0x38, 0x0, // @206 "58"
    0x35, 0x39, 0x0, // @209 "59"
    0x36, 0x30, 0x0, // @212 "60"
    0x36, 0x31, 0x0, // @215 "61"
    0x36, 0x32, 0x0, // @218 "62"
    0x36, 0x33, 0x0, // @221 "63"
    0x36, 0x34, 0x0, // @224 "64"
    0x36, 0x35, 0x0, // @227 "65"
    0x36, 0x36, 0x0, // @230 "66"
    0x36, 0x37, 0x0, // @233 "67"
    0x36, 0x38, 0x0, // @236 "68"
    0x36, 0x39, 0x0, // @239 "69"
    0x37, 0x30, 0x0, // @242 "70"
    0x37, 0x31, 0x0, // @245 "71"
    0x37, 0x32, 0x0, // @248 "72"
    0x37, 0x33, 0x0, // @251 "73"
    0x37, 0x34, 0x0, // @254 "74"
    0x37, 0x35, 0x0, // @257 "75"
    0x37, 0x36, 0x0, // @260 "76"
    0x37, 0x37, 0x0, // @263 "77"
    0x37, 0x38, 0x0, // @266 "78"
    0x37, 0x39, 0x0, // @269 "79"
    0x38, 0x30, 0x0, // @272 "80"
    0x38, 0x31, 0x0, // @275 "81"
    0x38, 0x32, 0x0, // @278 "82"
    0x38, 0x33, 0x0, // @281 "83"
    0x38, 0x34, 0x0, // @284 "84"
    0x38, 0x35, 0x0, // @287 "85"
    0x38, 0x36, 0x0, // @290 "86"
    0x38, 0x37, 0x0, // @293 "87"
    0x38, 0x38, 0x0, // @296 "88"
    0x38, 0x39, 0x0, // @299 "89"
    0x39, 0x30, 0x0, // @302 "90"
    0x39, 0x31, 0x0, // @305 "91"
    0x39, 0x32, 0x0, // @308 "92"
    0x39, 0x33, 0x0, // @311 "93"
    0x39, 0x34, 0x0, // @314 "94"
    0x39, 0x35, 0x0, // @317 "95"
    0x39, 0x36, 0x0, // @320 "96"
    0x39, 0x37, 0x0, // @323 "97"
    0x39, 0x38, 0x0, // @326 "98"
    0x39, 0x39, 0x0, // @329 "99"
    0x48, 0x56, 0x0, // @332 "HV"
    0x4c, 0x56, 0x0, // @335 "LV"
    0x4e, 0x41, 0x0, // @338 "NA"
    0x58, 0x58, 0x0, // @341 "XX"
    0x6b, 0x57, 0x0, // @344 "kW"
    0x2e, 0x0, // @347 "."
    0x3a, 0x0 // @349 ":"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
