/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0xa, 0x54, 0x65, 0x6d, 0x70, 0x0, // @0 "Battery\nTemp"
    0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x20, 0xa, 0x54, 0x65, 0x6d, 0x70, 0x0, // @13 "Motor \nTemp"
    0x2, 0x0, // @25 "<>"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x53, 0x0, // @27 "ERRORS"
    0x30, 0x30, 0x0, // @34 "00"
    0x30, 0x31, 0x0, // @37 "01"
    0x30, 0x32, 0x0, // @40 "02"
    0x30, 0x33, 0x0, // @43 "03"
    0x30, 0x34, 0x0, // @46 "04"
    0x30, 0x35, 0x0, // @49 "05"
    0x30, 0x36, 0x0, // @52 "06"
    0x30, 0x37, 0x0, // @55 "07"
    0x30, 0x38, 0x0, // @58 "08"
    0x30, 0x39, 0x0, // @61 "09"
    0x31, 0x30, 0x0, // @64 "10"
    0x31, 0x31, 0x0, // @67 "11"
    0x31, 0x32, 0x0, // @70 "12"
    0x31, 0x33, 0x0, // @73 "13"
    0x31, 0x34, 0x0, // @76 "14"
    0x31, 0x35, 0x0, // @79 "15"
    0x31, 0x36, 0x0, // @82 "16"
    0x31, 0x37, 0x0, // @85 "17"
    0x31, 0x38, 0x0, // @88 "18"
    0x31, 0x39, 0x0, // @91 "19"
    0x32, 0x30, 0x0, // @94 "20"
    0x32, 0x31, 0x0, // @97 "21"
    0x32, 0x32, 0x0, // @100 "22"
    0x32, 0x33, 0x0, // @103 "23"
    0x32, 0x34, 0x0, // @106 "24"
    0x32, 0x35, 0x0, // @109 "25"
    0x32, 0x36, 0x0, // @112 "26"
    0x32, 0x37, 0x0, // @115 "27"
    0x32, 0x38, 0x0, // @118 "28"
    0x32, 0x39, 0x0, // @121 "29"
    0x33, 0x30, 0x0, // @124 "30"
    0x33, 0x31, 0x0, // @127 "31"
    0x33, 0x32, 0x0, // @130 "32"
    0x33, 0x33, 0x0, // @133 "33"
    0x33, 0x34, 0x0, // @136 "34"
    0x33, 0x35, 0x0, // @139 "35"
    0x33, 0x36, 0x0, // @142 "36"
    0x33, 0x37, 0x0, // @145 "37"
    0x33, 0x38, 0x0, // @148 "38"
    0x33, 0x39, 0x0, // @151 "39"
    0x34, 0x30, 0x0, // @154 "40"
    0x34, 0x31, 0x0, // @157 "41"
    0x34, 0x32, 0x0, // @160 "42"
    0x34, 0x33, 0x0, // @163 "43"
    0x34, 0x34, 0x0, // @166 "44"
    0x34, 0x35, 0x0, // @169 "45"
    0x34, 0x36, 0x0, // @172 "46"
    0x34, 0x37, 0x0, // @175 "47"
    0x34, 0x38, 0x0, // @178 "48"
    0x34, 0x39, 0x0, // @181 "49"
    0x35, 0x30, 0x0, // @184 "50"
    0x35, 0x31, 0x0, // @187 "51"
    0x35, 0x32, 0x0, // @190 "52"
    0x35, 0x33, 0x0, // @193 "53"
    0x35, 0x34, 0x0, // @196 "54"
    0x35, 0x35, 0x0, // @199 "55"
    0x35, 0x36, 0x0, // @202 "56"
    0x35, 0x37, 0x0, // @205 "57"
    0x35, 0x38, 0x0, // @208 "58"
    0x35, 0x39, 0x0, // @211 "59"
    0x36, 0x30, 0x0, // @214 "60"
    0x36, 0x31, 0x0, // @217 "61"
    0x36, 0x32, 0x0, // @220 "62"
    0x36, 0x33, 0x0, // @223 "63"
    0x36, 0x34, 0x0, // @226 "64"
    0x36, 0x35, 0x0, // @229 "65"
    0x36, 0x36, 0x0, // @232 "66"
    0x36, 0x37, 0x0, // @235 "67"
    0x36, 0x38, 0x0, // @238 "68"
    0x36, 0x39, 0x0, // @241 "69"
    0x37, 0x30, 0x0, // @244 "70"
    0x37, 0x31, 0x0, // @247 "71"
    0x37, 0x32, 0x0, // @250 "72"
    0x37, 0x33, 0x0, // @253 "73"
    0x37, 0x34, 0x0, // @256 "74"
    0x37, 0x35, 0x0, // @259 "75"
    0x37, 0x36, 0x0, // @262 "76"
    0x37, 0x37, 0x0, // @265 "77"
    0x37, 0x38, 0x0, // @268 "78"
    0x37, 0x39, 0x0, // @271 "79"
    0x38, 0x30, 0x0, // @274 "80"
    0x38, 0x31, 0x0, // @277 "81"
    0x38, 0x32, 0x0, // @280 "82"
    0x38, 0x33, 0x0, // @283 "83"
    0x38, 0x34, 0x0, // @286 "84"
    0x38, 0x35, 0x0, // @289 "85"
    0x38, 0x36, 0x0, // @292 "86"
    0x38, 0x37, 0x0, // @295 "87"
    0x38, 0x38, 0x0, // @298 "88"
    0x38, 0x39, 0x0, // @301 "89"
    0x39, 0x30, 0x0, // @304 "90"
    0x39, 0x31, 0x0, // @307 "91"
    0x39, 0x32, 0x0, // @310 "92"
    0x39, 0x33, 0x0, // @313 "93"
    0x39, 0x34, 0x0, // @316 "94"
    0x39, 0x35, 0x0, // @319 "95"
    0x39, 0x36, 0x0, // @322 "96"
    0x39, 0x37, 0x0, // @325 "97"
    0x39, 0x38, 0x0, // @328 "98"
    0x39, 0x39, 0x0, // @331 "99"
    0x48, 0x56, 0x0, // @334 "HV"
    0x4c, 0x56, 0x0, // @337 "LV"
    0x4e, 0x41, 0x0, // @340 "NA"
    0x58, 0x58, 0x0, // @343 "XX"
    0x6b, 0x57, 0x0, // @346 "kW"
    0x2e, 0x0, // @349 "."
    0x3a, 0x0 // @351 ":"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
